import{_ as s,o as n,c as a,e}from"./app-CUvyzFzm.js";const t={},p=e(`<h1 id="如何写一个-typescript-库" tabindex="-1"><a class="header-anchor" href="#如何写一个-typescript-库"><span>如何写一个 TypeScript 库</span></a></h1><h2 id="第-1-步-初始化一个-node-js-项目" tabindex="-1"><a class="header-anchor" href="#第-1-步-初始化一个-node-js-项目"><span>第 1 步：初始化一个 Node.js 项目</span></a></h2><p>在本教程中，演示类库包名为 <code>sample-library</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化生成的 package.json 看起来像这样：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// sample-library/package.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sample-library&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Can log \\&quot;hello world\\&quot; and \\&quot;goodbye world\\&quot; to the console!&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/index.d.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;/dist&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p><code>package.json</code> 中的<code>types</code>选项，用作声明在哪里可以找到声明文件，否则使用者将找不到您的模块！</p></div><h2 id="第-2-步-设置-tsconfig-json" tabindex="-1"><a class="header-anchor" href="#第-2-步-设置-tsconfig-json"><span>第 2 步：设置 tsconfig.json</span></a></h2><p>在项目根目录下创建 <code>tsconfig.json</code> 文件，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//  sample-library/tsconfig.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2015&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;src/**/*&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选项说明：</p><ul><li><p><code>“declaration”：true</code> ：这将生成包含代码类型的.d.ts文件（也称为声明文件）。如果有人正在使用你的库，并且他们也使用 TypeScript，那么他们将获得类型安全和自动完成的好处！</p></li><li><p><code>“module”：“commonjs”</code>：为 node.js 应用程序构建库。如果要为浏览器构建库，请将<code>“commonjs”</code>替换为<code>“esnext”</code>。</p></li><li><p><code>“target”：“es2015”</code> 指定代码将被转译到哪个版本的JavaScript。选择es2015作为编译目标使你的库兼容 node.js 8及更高版本。</p></li><li><p><code>“outDir”：“./dist”</code> 将编译文件写入dist文件夹；</p></li><li><p><code>include</code> 选项指定源代码所在的位置。</p></li></ul><h2 id="第-3-步-实现你的库" tabindex="-1"><a class="header-anchor" href="#第-3-步-实现你的库"><span>第 3 步：实现你的库</span></a></h2><p>创建一个src文件夹，并将库的所有源文件（应用程序逻辑、数据等）放在里面。</p><p>在这个演示中，我们设置一个简单的 hello-word.ts 文件，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// sample-library/src/hello-world.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayGoodbye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;goodbye&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-4-步-创建-index-ts-文件" tabindex="-1"><a class="header-anchor" href="#第-4-步-创建-index-ts-文件"><span>第 4 步：创建 index.ts 文件</span></a></h2><p>添加 index.ts 文件到src文件夹。它的目的是导出类库中，所有公开给使用者使用的内容，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// sample-library/src/index.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>sayHello<span class="token punctuation">,</span> sayGoodbye<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./hello-world&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用者可以像这样使用该库：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// otherproject/src/somefile.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>sayHello<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;sample-library&#39;</span>
<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-5-步-发布到npm" tabindex="-1"><a class="header-anchor" href="#第-5-步-发布到npm"><span>第 5 步：发布到npm</span></a></h2><p>发布第一个版本到npm，请运行：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>tsc
npm publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">对于后续更新发布，可以参照以下原则</p><ul><li>当你对库进行修补程序/错误修复时，可以运行 npm version patch，</li><li>对于新功能，运行 npm version minor，</li><li>在api发生更改时，运行 npm version major。</li></ul></div><p>以上教程包含构建和发布工作库所需的所有步骤。</p>`,26),o=[p];function i(l,c){return n(),a("div",null,o)}const d=s(t,[["render",i],["__file","how-to-write-a-typescript-library.html.vue"]]),u=JSON.parse('{"path":"/nodejs/how-to-write-a-typescript-library.html","title":"如何写一个 TypeScript 库","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"第 1 步：初始化一个 Node.js 项目","slug":"第-1-步-初始化一个-node-js-项目","link":"#第-1-步-初始化一个-node-js-项目","children":[]},{"level":2,"title":"第 2 步：设置 tsconfig.json","slug":"第-2-步-设置-tsconfig-json","link":"#第-2-步-设置-tsconfig-json","children":[]},{"level":2,"title":"第 3 步：实现你的库","slug":"第-3-步-实现你的库","link":"#第-3-步-实现你的库","children":[]},{"level":2,"title":"第 4 步：创建 index.ts 文件","slug":"第-4-步-创建-index-ts-文件","link":"#第-4-步-创建-index-ts-文件","children":[]},{"level":2,"title":"第 5 步：发布到npm","slug":"第-5-步-发布到npm","link":"#第-5-步-发布到npm","children":[]}],"git":{"updatedTime":1670606899000},"filePathRelative":"nodejs/how-to-write-a-typescript-library.md"}');export{d as comp,u as data};
