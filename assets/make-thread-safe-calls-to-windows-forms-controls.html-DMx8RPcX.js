import{_ as o,r as p,o as c,c as l,a as s,d as n,b as t,e}from"./app-CUvyzFzm.js";const i={},u=e(`<h1 id="对-windows-窗体控件进行线程安全调用" tabindex="-1"><a class="header-anchor" href="#对-windows-窗体控件进行线程安全调用"><span>对 Windows 窗体控件进行线程安全调用</span></a></h1><h2 id="不安全的跨线程调用" tabindex="-1"><a class="header-anchor" href="#不安全的跨线程调用"><span>不安全的跨线程调用</span></a></h2><p>直接从未创建控件的线程调用该控件是不安全的。</p><p>以下代码片段演示了对 <code>TextBox</code> 控件的不安全调用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Button1_Click 事件处理程序创建一个新的 WriteTextUnsafe 线程，该线程直接设置主线程的 TextBox.Text 属性。</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>WriteTextUnsafe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteTextUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;This text was set unsafely.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Visual Studio 调试器通过引发 <code>InvalidOperationException</code> 异常，并显示消息“跨线程操作无效。控件从创建它的线程以外的线程访问。”</p><h2 id="安全的跨线程调用" tabindex="-1"><a class="header-anchor" href="#安全的跨线程调用"><span>安全的跨线程调用</span></a></h2><p>以下代码示例演示了两种从非 Windows 窗体控件的线程安全调用该窗体的方法：</p><ol><li><code>System.Windows.Forms.Control.Invoke</code> 方法，它从主线程调用委托以调用控件。</li><li><code>System.ComponentModel.BackgroundWorker</code> 组件，它提供事件驱动模型。</li></ol><h3 id="示例-将-invoke-方法与委托配合使用" tabindex="-1"><a class="header-anchor" href="#示例-将-invoke-方法与委托配合使用"><span>示例：将 Invoke 方法与委托配合使用</span></a></h3><p>下面的示例演示了使用 <code>Invoke</code> 方法对 Windows 窗体控件进行线程安全调用 。</p>`,11),r=s("p",null,[n("使用 "),s("code",null,"Thread"),n(" 来创建线程任务")],-1),k={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.control.invokerequired",target:"_blank",rel:"noopener noreferrer"},d={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.control.invoke",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Button1_Click 事件处理程序创建新线程并运行 WriteTextSafe 方法</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> threadParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>ThreadStart</span><span class="token punctuation">(</span><span class="token keyword">delegate</span> <span class="token punctuation">{</span> <span class="token function">WriteTextSafe</span><span class="token punctuation">(</span><span class="token string">&quot;This text was set safely.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread</span><span class="token punctuation">(</span>threadParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteTextSafe</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>textBox1<span class="token punctuation">.</span>InvokeRequired<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Action</span> safeWrite <span class="token operator">=</span> <span class="token keyword">delegate</span> <span class="token punctuation">{</span> <span class="token function">WriteTextSafe</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">text</span><span class="token punctuation">}</span></span><span class="token string"> (THREAD)&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        textBox1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>safeWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> text<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>Task</code> 来创建线程任务</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainForm</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MainForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 启动一个返回结果的任务</span>
        <span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟耗时操作</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Hello from Task!&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        

        <span class="token comment">// 使用 ContinueWith 避免阻塞UI线程, 在任务完成后处理结果，并确保在UI线程执行</span>
        task<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>IsFaulted<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;任务出错：&quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>InnerException<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 安全地更新UI</span>
                <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Action<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
                <span class="token punctuation">{</span>
                    labelResult<span class="token punctuation">.</span>Text <span class="token operator">=</span> t<span class="token punctuation">.</span>Result<span class="token punctuation">;</span> 
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> TaskScheduler<span class="token punctuation">.</span><span class="token function">FromCurrentSynchronizationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例-使用-backgroundworker-事件处理程序" tabindex="-1"><a class="header-anchor" href="#示例-使用-backgroundworker-事件处理程序"><span>示例：使用 BackgroundWorker 事件处理程序</span></a></h3><p>下面的示例演示了使用 <code>BackgroundWorker</code> 组件对 Windows 窗体控件进行线程安全调用 。</p>`,5),m=s("code",null,"BackgroundWorker",-1),b={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.componentmodel.backgroundworker.dowork#system-componentmodel-backgroundworker-dowork",target:"_blank",rel:"noopener noreferrer"},w={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.componentmodel.backgroundworker.progresschanged#system-componentmodel-backgroundworker-progresschanged",target:"_blank",rel:"noopener noreferrer"},h={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.componentmodel.backgroundworker.runworkercompleted#system-componentmodel-backgroundworker-runworkercompleted",target:"_blank",rel:"noopener noreferrer"},g=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BackgroundWorkerForm</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">BackgroundWorker</span> backgroundWorker1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Button</span> button1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">TextBox</span> textBox1<span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">STAThread</span></span><span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">SetCompatibleTextRenderingDefault</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Application<span class="token punctuation">.</span><span class="token function">EnableVisualStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">BackgroundWorkerForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">BackgroundWorkerForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 使用 RunWorkerCompleted 事件处理程序来设置 TextBox 控件的 Text 属性。</span>
        backgroundWorker1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BackgroundWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        backgroundWorker1<span class="token punctuation">.</span>DoWork <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DoWorkEventHandler</span><span class="token punctuation">(</span>BackgroundWorker1_DoWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
        backgroundWorker1<span class="token punctuation">.</span>RunWorkerCompleted <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RunWorkerCompletedEventHandler</span><span class="token punctuation">(</span>BackgroundWorker1_RunWorkerCompleted<span class="token punctuation">)</span><span class="token punctuation">;</span>
        button1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span>
        <span class="token punctuation">{</span>
            Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Size</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Text <span class="token operator">=</span> <span class="token string">&quot;Set text safely with BackgroundWorker&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        button1<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>Button1_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
        textBox1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span>
        <span class="token punctuation">{</span>
            Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Size</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>button1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>textBox1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        backgroundWorker1<span class="token punctuation">.</span><span class="token function">RunWorkerAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BackgroundWorker1_DoWork</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">DoWorkEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Sleep 2 seconds to emulate getting data.</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token string">&quot;This text was set safely by BackgroundWorker.&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BackgroundWorker1_RunWorkerCompleted</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RunWorkerCompletedEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> e<span class="token punctuation">.</span>Result<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y={href:"https://learn.microsoft.com/zh-cn/dotnet/desktop/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls?view=netframeworkdesktop-4.8",target:"_blank",rel:"noopener noreferrer"};function f(x,W){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,s("ul",null,[s("li",null,[r,s("p",null,[n("通过查询 "),s("a",k,[n("System.Windows.Forms.Control.InvokeRequired"),t(a)]),n(" 属性，该属性将控件的创建线程 ID 与调用线程 ID 进行比较。 如果线程 ID 相同，则直接调用控件。 如果线程 ID 不同，它会使用来自主线程的委托调用 "),s("a",d,[n("Control.Invoke"),t(a)]),n(" 方法，从而实现调用控件。")])])]),v,s("p",null,[m,n(" 组件的后台线程引发不与主线程交互的 "),s("a",b,[n("BackgroundWorker.DoWork"),t(a)]),n(" 事件。 主线程运行 "),s("a",w,[n("BackgroundWorker.ProgressChanged"),t(a)]),n(" 和 "),s("a",h,[n("BackgroundWorker.RunWorkerCompleted"),t(a)]),n(" 事件处理程序，通过它们实现调用主线程的控件。")]),g,s("p",null,[n("相关详细信息，请参阅："),s("a",y,[n("如何：对 Windows 窗体控件进行线程安全调用"),t(a)])])])}const T=o(i,[["render",f],["__file","make-thread-safe-calls-to-windows-forms-controls.html.vue"]]),B=JSON.parse('{"path":"/dotnet/make-thread-safe-calls-to-windows-forms-controls.html","title":"对 Windows 窗体控件进行线程安全调用","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"不安全的跨线程调用","slug":"不安全的跨线程调用","link":"#不安全的跨线程调用","children":[]},{"level":2,"title":"安全的跨线程调用","slug":"安全的跨线程调用","link":"#安全的跨线程调用","children":[{"level":3,"title":"示例：将 Invoke 方法与委托配合使用","slug":"示例-将-invoke-方法与委托配合使用","link":"#示例-将-invoke-方法与委托配合使用","children":[]},{"level":3,"title":"示例：使用 BackgroundWorker 事件处理程序","slug":"示例-使用-backgroundworker-事件处理程序","link":"#示例-使用-backgroundworker-事件处理程序","children":[]}]}],"git":{"updatedTime":1716024460000},"filePathRelative":"dotnet/make-thread-safe-calls-to-windows-forms-controls.md"}');export{T as comp,B as data};
